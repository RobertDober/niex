{"metadata":{"name":"Niex: Interactive Elixir Notebook"},"nbformat":3,"nbformat_minor":0,"worksheets":[{"cells":[{"cell_type":"code","collapsed":false,"input":["Shiny.Backtester.backtest(\"SPY\", Shiny.Strategies.GapFade, 30)"],"language":"python","metadata":{},"outputs":[{"text":["%UndefinedFunctionError{arity: 3, function: :backtest, message: nil, module: Shiny.Backtester, reason: nil}"]}],"prompt_number":1},{"cell_type":"markdown","metadata":{},"source":["### Mock a function\n","\n","Here I use a mock object to stand in for a function. No matter how it is called it will return `42`."]},{"cell_type":"code","collapsed":false,"input":["dataset = %Contex.Dataset{\r\n  data: [\r\n    {\"Tic-Tac-Toe\", 3.4285714285714284},\r\n    {\"Ping Pong\", 2.5714285714285716},\r\n    {\"Pictionary\", 1.625}\r\n  ]}\r\n\r\nchart = Contex.Plot.new(600, 200, Contex.BarChart.new(dataset))\r\n"],"language":"python","metadata":{},"outputs":[{"text":["<svg class=\"chart\" viewBox=\"0 0 600 200\"  role=\"img\">","","","<g transform=\"translate(70,10)\">",[["<g ","transform=\"translate(0, 120)\""," fill=\"none\" font-size=\"10\" text-anchor=\"middle\">","<path class=\"exc-domain\" stroke=\"#000\" d=\"M0.5, 6V0.5H520.5V6\"></path>",[["<g class=\"exc-tick\" opacity=\"1\" transform=","\"translate(87.16666666666667,0)\"",">","<line y2=\"6\"></line>","<text y=\"9\" dy=\"0.71em\" dx=\"0\" text-anchor=\"middle\">Tic-Tac-Toe</text>","</g>"],["<g class=\"exc-tick\" opacity=\"1\" transform=","\"translate(260.5,0)\"",">","<line y2=\"6\"></line>","<text y=\"9\" dy=\"0.71em\" dx=\"0\" text-anchor=\"middle\">Ping Pong</text>","</g>"],["<g class=\"exc-tick\" opacity=\"1\" transform=","\"translate(433.83333333333337,0)\"",">","<line y2=\"6\"></line>","<text y=\"9\" dy=\"0.71em\" dx=\"0\" text-anchor=\"middle\">Pictionary</text>","</g>"]],"</g>"],["<g "," "," fill=\"none\" font-size=\"10\" text-anchor=\"end\">","<path class=\"exc-domain\" stroke=\"#000\" d=\"M-6,120.5H0.5V0.5H-6\"></path>",[["<g class=\"exc-tick\" opacity=\"1\" transform=","\"translate(0, 120.5)\"",">","<line x2=\"-6\"></line>","<text x=\"-9\" dy=\"0.32em\">0.00</text>","</g>"],["<g class=\"exc-tick\" opacity=\"1\" transform=","\"translate(0, 107.16666666666667)\"",">","<line x2=\"-6\"></line>","<text x=\"-9\" dy=\"0.32em\">0.40</text>","</g>"],["<g class=\"exc-tick\" opacity=\"1\" transform=","\"translate(0, 93.83333333333333)\"",">","<line x2=\"-6\"></line>","<text x=\"-9\" dy=\"0.32em\">0.80</text>","</g>"],["<g class=\"exc-tick\" opacity=\"1\" transform=","\"translate(0, 80.5)\"",">","<line x2=\"-6\"></line>","<text x=\"-9\" dy=\"0.32em\">1.20</text>","</g>"],["<g class=\"exc-tick\" opacity=\"1\" transform=","\"translate(0, 67.16666666666666)\"",">","<line x2=\"-6\"></line>","<text x=\"-9\" dy=\"0.32em\">1.60</text>","</g>"],["<g class=\"exc-tick\" opacity=\"1\" transform=","\"translate(0, 53.83333333333333)\"",">","<line x2=\"-6\"></line>","<text x=\"-9\" dy=\"0.32em\">2.00</text>","</g>"],["<g class=\"exc-tick\" opacity=\"1\" transform=","\"translate(0, 40.499999999999986)\"",">","<line x2=\"-6\"></line>","<text x=\"-9\" dy=\"0.32em\">2.40</text>","</g>"],["<g class=\"exc-tick\" opacity=\"1\" transform=","\"translate(0, 27.16666666666667)\"",">","<line x2=\"-6\"></line>","<text x=\"-9\" dy=\"0.32em\">2.80</text>","</g>"],["<g class=\"exc-tick\" opacity=\"1\" transform=","\"translate(0, 13.833333333333329)\"",">","<line x2=\"-6\"></line>","<text x=\"-9\" dy=\"0.32em\">3.20</text>","</g>"],["<g class=\"exc-tick\" opacity=\"1\" transform=","\"translate(0, 0.5)\"",">","<line x2=\"-6\"></line>","<text x=\"-9\" dy=\"0.32em\">3.60</text>","</g>"]],"</g>"],"<g>",[[[["<rect ","x=\"1.0\" y=\"5.714285714285722\" width=\"171.33333333333334\" height=\"114.28571428571428\"",[[" style=\"fill:#","1f77b4",";\""]],">",["<title ",[],">","3.43","</title>"],"</rect>"]],[["<text ","x=\"86.66666666666667\" y=\"62.85714285714286\"",[[" class=\"","exc-barlabel-in","\""],[" text-anchor=\"","middle","\""]],">","3.43","</text>"]]],[[["<rect ","x=\"174.33333333333334\" y=\"34.28571428571428\" width=\"171.33333333333334\" height=\"85.71428571428572\"",[[" style=\"fill:#","1f77b4",";\""]],">",["<title ",[],">","2.57","</title>"],"</rect>"]],[["<text ","x=\"260.0\" y=\"77.14285714285714\"",[[" class=\"","exc-barlabel-in","\""],[" text-anchor=\"","middle","\""]],">","2.57","</text>"]]],[[["<rect ","x=\"347.6666666666667\" y=\"65.83333333333334\" width=\"171.33333333333331\" height=\"54.16666666666666\"",[[" style=\"fill:#","1f77b4",";\""]],">",["<title ",[],">","1.63","</title>"],"</rect>"]],[["<text ","x=\"433.33333333333337\" y=\"92.91666666666667\"",[[" class=\"","exc-barlabel-in","\""],[" text-anchor=\"","middle","\""]],">","1.63","</text>"]]]],"</g>"],"</g>","","</svg>"]}],"prompt_number":2},{"cell_type":"markdown","metadata":{},"source":["Mock objects remember how they have been called and you can test that they were called correctly."]},{"cell_type":"code","collapsed":false,"input":[""],"language":"python","metadata":{},"outputs":[{"text":["nil"]}],"prompt_number":3},{"cell_type":"markdown","metadata":{},"source":["If the calling sequences don't match you get an assertion error."]},{"cell_type":"code","collapsed":false,"input":["data = [[1, 60], [2, 80], [3, 711]]\r\n\r\nNiex.Content.chart(\"LineChart\", data)"],"language":"python","metadata":{},"outputs":[{"text":"<div phx-hook=\"NiexChart\" data-chart='{\"data\":[[1,60],[2,80],[3,711]],\"options\":[],\"type\":\"LineChart\"}' id=\"dee62893-5e43-431c-8fd9-7966da7d6526}\" />\n"}],"prompt_number":4},{"cell_type":"markdown","metadata":{},"source":["`assert_called_with` applies only to the most recent call."]},{"cell_type":"markdown","metadata":{},"source":["### Mock a non-callable class\n","\n","Here I use a mock object to stand in for a class and method. It looks very similar to above. A `NonCallableMock` is basically the same as a plain `Mock` except it cannot be called."]},{"cell_type":"code","collapsed":false,"input":["data = [\r\n  %{name: \"Apple\", data: %{\"Tuesday\": 3, \"Friday\": 4}, stack: \"fruit\"},\r\n  %{name: \"Pear\", data: %{\"Tuesday\": 1, \"Friday\": 8}, stack: \"fruit\"},\r\n  %{name: \"Carrot\", data: %{\"Tuesday\": 3, \"Friday\": 4}, stack: \"vegetable\"},\r\n  %{name: \"Beet\", data: %{\"Tuesday\": 1, \"Friday\": 8}, stack: \"vegetable\"}\r\n]\r\n\r\nNiex.Content.chart(\"BarChart\", data, stacked: true)"],"language":"python","metadata":{},"outputs":[{"text":"<div phx-hook=\"NiexChart\" data-chart='{\"data\":[{\"data\":{\"Friday\":4,\"Tuesday\":3},\"name\":\"Apple\",\"stack\":\"fruit\"},{\"data\":{\"Friday\":8,\"Tuesday\":1},\"name\":\"Pear\",\"stack\":\"fruit\"},{\"data\":{\"Friday\":4,\"Tuesday\":3},\"name\":\"Carrot\",\"stack\":\"vegetable\"},{\"data\":{\"Friday\":8,\"Tuesday\":1},\"name\":\"Beet\",\"stack\":\"vegetable\"}],\"options\":[],\"type\":\"BarChart\"}' id=\"468649c5-88e7-4dd2-bca6-9e03a483501b}\" />\n"}],"prompt_number":5},{"cell_type":"code","collapsed":false,"input":["mock_class.some_method.assert_called_once_with(6, 9)"],"language":"python","metadata":{},"outputs":[],"prompt_number":6},{"cell_type":"markdown","metadata":{},"source":["### Side effects\n","\n","Mock objects can have side effects when called instead of simple return values. One desireable side effect might be to raise an exception to make sure your code under test responds correctly."]},{"cell_type":"code","collapsed":false,"input":["mock_func_w_side_effect = mock.Mock()\r\n\r\nmock_func_w_side_effect.side_effect = ValueError('Wrong!')\r\n\r\nmock_func_w_side_effect()"],"language":"python","metadata":{},"outputs":[{"ename":"ValueError","evalue":"Wrong!","output_type":"pyerr","traceback":["\u001B[0;31m---------------------------------------------------------------------------\u001B[0m\n\u001B[0;31mValueError\u001B[0m                                Traceback (most recent call last)","\u001B[0;32m<ipython-input-7-c8ad7335dff3>\u001B[0m in \u001B[0;36m<module>\u001B[0;34m()\u001B[0m\n\u001B[1;32m      1\u001B[0m \u001B[0mmock_func_w_side_effect\u001B[0m \u001B[0;34m=\u001B[0m \u001B[0mmock\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0mMock\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m      2\u001B[0m \u001B[0mmock_func_w_side_effect\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0mside_effect\u001B[0m \u001B[0;34m=\u001B[0m \u001B[0mValueError\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0;34m'Wrong!'\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0;32m----> 3\u001B[0;31m \u001B[0mmock_func_w_side_effect\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0m","\u001B[0;32m/Users/mrdavis/py-lib/mock-1.0b1-py2.7.egg/mock.pyc\u001B[0m in \u001B[0;36m__call__\u001B[0;34m(_mock_self, *args, **kwargs)\u001B[0m\n\u001B[1;32m    942\u001B[0m         \u001B[0;31m# in the signature\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m    943\u001B[0m         \u001B[0m_mock_self\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0m_mock_check_sig\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0;34m*\u001B[0m\u001B[0margs\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0;34m**\u001B[0m\u001B[0mkwargs\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0;32m--> 944\u001B[0;31m         \u001B[0;32mreturn\u001B[0m \u001B[0m_mock_self\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0m_mock_call\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0;34m*\u001B[0m\u001B[0margs\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0;34m**\u001B[0m\u001B[0mkwargs\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0m\u001B[1;32m    945\u001B[0m \u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m    946\u001B[0m \u001B[0;34m\u001B[0m\u001B[0m\n","\u001B[0;32m/Users/mrdavis/py-lib/mock-1.0b1-py2.7.egg/mock.pyc\u001B[0m in \u001B[0;36m_mock_call\u001B[0;34m(_mock_self, *args, **kwargs)\u001B[0m\n\u001B[1;32m    997\u001B[0m         \u001B[0;32mif\u001B[0m \u001B[0meffect\u001B[0m \u001B[0;32mis\u001B[0m \u001B[0;32mnot\u001B[0m \u001B[0mNone\u001B[0m\u001B[0;34m:\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m    998\u001B[0m             \u001B[0;32mif\u001B[0m \u001B[0m_is_exception\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0meffect\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m:\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0;32m--> 999\u001B[0;31m                 \u001B[0;32mraise\u001B[0m \u001B[0meffect\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0m\u001B[1;32m   1000\u001B[0m \u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m   1001\u001B[0m             \u001B[0;32mif\u001B[0m \u001B[0;32mnot\u001B[0m \u001B[0m_callable\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0meffect\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m:\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n","\u001B[0;31mValueError\u001B[0m: Wrong!"]}],"prompt_number":7},{"cell_type":"markdown","metadata":{},"source":["Another side effect is a function that actually does something, but I couldn't think of many uses for this."]},{"cell_type":"code","collapsed":false,"input":["mock_func_w_side_effect.side_effect = lambda x, y: x + y\r\n\r\nmock_func_w_side_effect('spam', 'SPAM')"],"language":"python","metadata":{},"outputs":[{"output_type":"pyout","prompt_number":8,"text":["'spamSPAM'"]}],"prompt_number":8},{"cell_type":"markdown","metadata":{},"source":["### Patching\n","\n","Creating mock objects directly as in the above examples can be useful for constructing objects passed to code under test but you may also want to replace functions and objects used by the code under test. Since you don't have direct access to these you can use mock's `patch` utility, which comes in several flavors.\n","\n","As an example I'll create a toy function to test. It simply calls `json.dumps`. (Read more about the json module here: http://docs.python.org/library/json.html.)"]},{"cell_type":"code","collapsed":false,"input":["import json\r\n\r\ndef func_with_json(d):\r\n\r\n    return json.dumps(d)"],"language":"python","metadata":{},"outputs":[],"prompt_number":9},{"cell_type":"code","collapsed":false,"input":["d = {'a': 1, 'b': [2, 3]}  # a simple input for func_with_json"],"language":"python","metadata":{},"outputs":[],"prompt_number":10},{"cell_type":"markdown","metadata":{},"source":["`mock.patch` can be used as a context manager. Here it replaces the function `json.dumps`. At the end of the code block within the context manager `json.dumps` goes back to its normal state."]},{"cell_type":"code","collapsed":false,"input":["with mock.patch('json.dumps') as mock_dumps:\r\n\r\n    mock_dumps.return_value = 'JSON'\r\n\r\n    r = func_with_json(d)\r\n\r\n    assert r == 'JSON'\r\n\r\n    mock_dumps.assert_called_once_with(d)"],"language":"python","metadata":{},"outputs":[],"prompt_number":11},{"cell_type":"markdown","metadata":{},"source":["Outside the context block `json.dumps` works as normal:"]},{"cell_type":"code","collapsed":false,"input":["print json.dumps(d)"],"language":"python","metadata":{},"outputs":[{"output_type":"stream","stream":"stdout","text":["{\"a\": 1, \"b\": [2, 3]}\n"]}],"prompt_number":12},{"cell_type":"markdown","metadata":{},"source":["`mock.patch` can also be used as a function or class decorator, replacing an object inside the function or class.\n","\n","Here we use `mock.patch` to replace `json.dumps` within a test function. The mock object replacing `json.dumps` is passed to the test function as an argument."]},{"cell_type":"code","collapsed":false,"input":["@mock.patch('json.dumps')\r\n\r\ndef test_func_with_json(mock_dumps):\r\n\r\n    mock_dumps.return_value = 'JSON'\r\n\r\n    r = func_with_json({'c': {'d': [4]}})\r\n\r\n    assert r == 'JSON'\r\n\r\n    mock_dumps.assert_called_once_with(d)  # whoops, we didn't pass in d, this should fail.\r\n\r\ntest_func_with_json()"],"language":"python","metadata":{},"outputs":[{"ename":"AssertionError","evalue":"Expected call: dumps({'a': 1, 'b': [2, 3]})\nActual call: dumps({'c': {'d': [4]}})","output_type":"pyerr","traceback":["\u001B[0;31m---------------------------------------------------------------------------\u001B[0m\n\u001B[0;31mAssertionError\u001B[0m                            Traceback (most recent call last)","\u001B[0;32m<ipython-input-13-0c4563c6a92d>\u001B[0m in \u001B[0;36m<module>\u001B[0;34m()\u001B[0m\n\u001B[1;32m      5\u001B[0m     \u001B[0;32massert\u001B[0m \u001B[0mr\u001B[0m \u001B[0;34m==\u001B[0m \u001B[0;34m'JSON'\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m      6\u001B[0m     \u001B[0mmock_dumps\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0massert_called_once_with\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0md\u001B[0m\u001B[0;34m)\u001B[0m  \u001B[0;31m# whoops, we didn't pass in d, this should fail.\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0;32m----> 7\u001B[0;31m \u001B[0mtest_func_with_json\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0m","\u001B[0;32m/Users/mrdavis/py-lib/mock-1.0b1-py2.7.egg/mock.pyc\u001B[0m in \u001B[0;36mpatched\u001B[0;34m(*args, **keywargs)\u001B[0m\n\u001B[1;32m   1188\u001B[0m \u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m   1189\u001B[0m                     \u001B[0margs\u001B[0m \u001B[0;34m+=\u001B[0m \u001B[0mtuple\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0mextra_args\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0;32m-> 1190\u001B[0;31m                     \u001B[0;32mreturn\u001B[0m \u001B[0mfunc\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0;34m*\u001B[0m\u001B[0margs\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0;34m**\u001B[0m\u001B[0mkeywargs\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0m\u001B[1;32m   1191\u001B[0m                 \u001B[0;32mexcept\u001B[0m\u001B[0;34m:\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m   1192\u001B[0m                     if (patching not in entered_patchers and\n","\u001B[0;32m<ipython-input-13-0c4563c6a92d>\u001B[0m in \u001B[0;36mtest_func_with_json\u001B[0;34m(mock_dumps)\u001B[0m\n\u001B[1;32m      4\u001B[0m     \u001B[0mr\u001B[0m \u001B[0;34m=\u001B[0m \u001B[0mfunc_with_json\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0;34m{\u001B[0m\u001B[0;34m'c'\u001B[0m\u001B[0;34m:\u001B[0m \u001B[0;34m{\u001B[0m\u001B[0;34m'd'\u001B[0m\u001B[0;34m:\u001B[0m \u001B[0;34m[\u001B[0m\u001B[0;36m4\u001B[0m\u001B[0;34m]\u001B[0m\u001B[0;34m}\u001B[0m\u001B[0;34m}\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m      5\u001B[0m     \u001B[0;32massert\u001B[0m \u001B[0mr\u001B[0m \u001B[0;34m==\u001B[0m \u001B[0;34m'JSON'\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0;32m----> 6\u001B[0;31m     \u001B[0mmock_dumps\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0massert_called_once_with\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0md\u001B[0m\u001B[0;34m)\u001B[0m  \u001B[0;31m# whoops, we didn't pass in d, this should fail.\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0m\u001B[1;32m      7\u001B[0m \u001B[0mtest_func_with_json\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n","\u001B[0;32m/Users/mrdavis/py-lib/mock-1.0b1-py2.7.egg/mock.pyc\u001B[0m in \u001B[0;36massert_called_once_with\u001B[0;34m(_mock_self, *args, **kwargs)\u001B[0m\n\u001B[1;32m    833\u001B[0m                    self.call_count)\n\u001B[1;32m    834\u001B[0m             \u001B[0;32mraise\u001B[0m \u001B[0mAssertionError\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0mmsg\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0;32m--> 835\u001B[0;31m         \u001B[0;32mreturn\u001B[0m \u001B[0mself\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0massert_called_with\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0;34m*\u001B[0m\u001B[0margs\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0;34m**\u001B[0m\u001B[0mkwargs\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0m\u001B[1;32m    836\u001B[0m \u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m    837\u001B[0m \u001B[0;34m\u001B[0m\u001B[0m\n","\u001B[0;32m/Users/mrdavis/py-lib/mock-1.0b1-py2.7.egg/mock.pyc\u001B[0m in \u001B[0;36massert_called_with\u001B[0;34m(_mock_self, *args, **kwargs)\u001B[0m\n\u001B[1;32m    822\u001B[0m         \u001B[0;32mif\u001B[0m \u001B[0mself\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0mcall_args\u001B[0m \u001B[0;34m!=\u001B[0m \u001B[0;34m(\u001B[0m\u001B[0margs\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0mkwargs\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m:\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m    823\u001B[0m             \u001B[0mmsg\u001B[0m \u001B[0;34m=\u001B[0m \u001B[0mself\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0m_format_mock_failure_message\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0margs\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0mkwargs\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0;32m--> 824\u001B[0;31m             \u001B[0;32mraise\u001B[0m \u001B[0mAssertionError\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0mmsg\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0m\u001B[1;32m    825\u001B[0m \u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m    826\u001B[0m \u001B[0;34m\u001B[0m\u001B[0m\n","\u001B[0;31mAssertionError\u001B[0m: Expected call: dumps({'a': 1, 'b': [2, 3]})\nActual call: dumps({'c': {'d': [4]}})"]}],"prompt_number":13},{"cell_type":"markdown","metadata":{},"source":["There are a number of different kinds of patches and different ways to use them. For more information refer to the [mock documentation](http://www.voidspace.org.uk/python/mock/)."]},{"cell_type":"code","collapsed":false,"input":[""],"language":"python","metadata":{},"outputs":[]}],"metadata":{}}]}